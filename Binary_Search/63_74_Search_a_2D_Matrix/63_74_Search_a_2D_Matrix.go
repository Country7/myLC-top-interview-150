package main

/* Задача Поиск в двумерной матрице
Дана целочисленная матрица размером m x n со следующими двумя свойствами:
Каждая строка отсортирована по неубывающему порядку.
Первое целое число каждой строки больше последнего целого числа предыдущей строки.
Если задано целочисленное значение, верните true, если значение находится в матрице, или false в противном случае.
Необходимо написать решение с временной сложностью O(log(m * n)). */

/*
Объяснение алгоритма:
Свойство матрицы гарантирует, что она отсортирована «по строкам и целиком»:
Каждая строка отсортирована по возрастанию.
Первый элемент каждой строки больше последнего элемента предыдущей строки.
Это значит, что если «развёрнуть» матрицу в одномерный массив, он будет отсортирован.
Мы используем бинарный поиск по этому «виртуальному массиву» длиной m*n.
Чтобы найти элемент по индексу:
row = index / n
col = index % n
Сложность алгоритма — O(log(m*n)), как и требуется.
*/

import (
	"fmt"
)

// ─────────────╮
// Функция ищет число target в матрице matrix.
// Возвращает true, если число найдено, иначе false.
func searchMatrix(matrix [][]int, target int) bool {
	// Количество строк (m) и количество столбцов (n)
	m := len(matrix)
	n := len(matrix[0])
	// Мы будем рассматривать всю матрицу как "развёрнутый" одномерный массив длиной m*n
	// Индексирование в этом массиве будет выглядеть так:
	// index -> matrix[row][col] где row = index / n, col = index % n
	// Левая и правая граница бинарного поиска
	left := 0
	right := m*n - 1
	// Классический бинарный поиск
	for left <= right {
		mid := (left + right) / 2 // Середина текущего диапазона
		// Переводим индекс mid в координаты (row, col) матрицы
		row := mid / n
		col := mid % n
		value := matrix[row][col] // Элемент в матрице
		if value == target {
			return true // нашли число
		} else if value < target {
			left = mid + 1 // сдвигаем левую границу вправо
		} else {
			right = mid - 1 // сдвигаем правую границу влево
		}
	}
	// Если не нашли число — возвращаем false
	return false
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	matrix1 := [][]int{
		{1, 3, 5, 7},
		{10, 11, 16, 20},
		{23, 30, 34, 60},
	}
	target1 := 3
	fmt.Println("Матрица:", matrix1)
	fmt.Println("Ищем ", target1, "  Результат", searchMatrix(matrix1, target1)) // true

	// Пример 2
	matrix2 := [][]int{
		{1, 3, 5, 7},
		{10, 11, 16, 20},
		{23, 30, 34, 60},
	}
	target2 := 13
	fmt.Println("Матрица:", matrix2)
	fmt.Println("Ищем ", target2, "  Результат", searchMatrix(matrix2, target2)) // false
	fmt.Println()
}
