package main

/* Задача K-й наибольший элемент массива
Дан массив целых чисел nums и целое число k. Вернуть k-й наибольший элемент массива.
Обратите внимание, что это k-й наибольший элемент в отсортированном порядке, а не k-й отдельный элемент.
Сможете ли вы решить эту задачу без сортировки? */

import (
	"container/heap"
	"fmt"
)

// Определяем тип MinHeap (минимальная куча), который будет хранить целые числа
// В Go контейнер heap требует реализации нескольких методов
type MinHeap []int

// Возвращает количество элементов в куче
func (h MinHeap) Len() int {
	return len(h)
}

// Сравнение элементов: для мин-кучи "меньший" элемент должен подниматься наверх
func (h MinHeap) Less(i, j int) bool {
	return h[i] < h[j]
}

// Меняет местами два элемента
func (h MinHeap) Swap(i, j int) {
	h[i], h[j] = h[j], h[i]
}

// Добавляет новый элемент в кучу
func (h *MinHeap) Push(x interface{}) {
	*h = append(*h, x.(int))
}

// Удаляет и возвращает минимальный элемент (корень кучи)
func (h *MinHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]     // последний элемент
	*h = old[0 : n-1] // уменьшаем срез
	return x
}

// ─────────────╮
// Функция нахождения k-го по величине элемента
func findKthLargest(nums []int, k int) int {
	// Создаем пустую мин-кучу
	h := &MinHeap{}
	heap.Init(h)
	// Проходим по всем элементам массива
	for _, num := range nums {
		heap.Push(h, num) // добавляем элемент в кучу
		// Если в куче больше k элементов — убираем минимальный
		if h.Len() > k {
			heap.Pop(h)
		}
	}
	// В куче осталось ровно k наибольших элементов,
	// при этом минимальный среди них и есть ответ
	return (*h)[0]
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{3, 2, 1, 5, 6, 4}
	k1 := 2
	fmt.Println(findKthLargest(nums1, k1)) // Ожидаем 5
	// Пример 2
	nums2 := []int{3, 2, 3, 1, 2, 4, 5, 5, 6}
	k2 := 4
	fmt.Println(findKthLargest(nums2, k2)) // Ожидаем 4
	fmt.Println()
}
