package main

/* –ó–∞–¥–∞—á–∞ –ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
–î–∞–Ω –∫–æ—Ä–µ–Ω—å –ø–æ–ª–Ω–æ–≥–æ –¥–≤–æ–∏—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. –í–µ—Ä–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ.
–°–æ–≥–ª–∞—Å–Ω–æ –í–∏–∫–∏–ø–µ–¥–∏–∏, –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –¥–≤–æ–∏—á–Ω–æ–º –¥–µ—Ä–µ–≤–µ, –∞ –≤—Å–µ —É–∑–ª—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–ª–µ–≤–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ h –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç 1 –¥–æ 2h –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –º–µ–Ω–µ–µ O(n).
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 5 * 10^4].
0 <= Node.val <= 5 * 10^4
–î–µ—Ä–µ–≤–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–º. */

import (
	"fmt"
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∑–ª–æ–≤ –≤ –ø–æ–ª–Ω–æ–º –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ
func countNodes(root *TreeNode) int {
	if root == nil {
		// –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
		return 0
	}
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤–∞, –∏–¥–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ª–µ–≤–æ–π –≤–µ—Ç–∫–µ
	getDepth := func(node *TreeNode) int {
		depth := 0
		for node != nil {
			node = node.Left
			depth++
		}
		return depth
	}
	leftDepth := getDepth(root.Left)
	rightDepth := getDepth(root.Right)
	if leftDepth == rightDepth {
		// –ï—Å–ª–∏ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≥–ª—É–±–∏–Ω—É,
		// –∑–Ω–∞—á–∏—Ç –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –∏–¥–µ–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ = 2^leftDepth - 1
		// –ò –¥–æ–±–∞–≤–ª—è–µ–º 1 –∑–∞ –∫–æ—Ä–µ–Ω—å –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É–∑–ª—ã –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ
		return (1 << leftDepth) + countNodes(root.Right)
		// –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ –Ω–∞ n –±–∏—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–º–Ω–æ–∂–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ 2^n. –¢–æ –µ—Å—Ç—å: 1 << ùëõ = 2 ^ ùëõ
		// (1 << leftDepth) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ –±–µ–∑ –∫–æ—Ä–Ω—è: 2 ^ leftDepth
		// —Å–¥–≤–∏–≥ –∑–∞–º–µ–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ.
	} else {
		// –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω—ã –Ω–µ —Ä–∞–≤–Ω—ã, –∑–Ω–∞—á–∏—Ç –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –∏–¥–µ–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ –≥–ª—É–±–∏–Ω–µ rightDepth
		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –ø—Ä–∞–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ = 2^rightDepth - 1
		// –ò –¥–æ–±–∞–≤–ª—è–µ–º 1 –∑–∞ –∫–æ—Ä–µ–Ω—å –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É–∑–ª—ã –≤ –ª–µ–≤–æ–º –ø–æ–¥–¥–µ—Ä–µ–≤–µ
		return (1 << rightDepth) + countNodes(root.Left)
	}
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ‚ï∞‚îÄ‚îÄ>
func main() {
	fmt.Println()
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–µ—Ä–µ–≤–∞: [1,2,3,4,5,6]
	root := &TreeNode{1,
		&TreeNode{2,
			&TreeNode{4, nil, nil},
			&TreeNode{5, nil, nil},
		},
		&TreeNode{3,
			&TreeNode{6, nil, nil},
			nil,
		},
	}
	fmt.Println(countNodes(root)) // –í—ã–≤–æ–¥: 6
	fmt.Println()
}
