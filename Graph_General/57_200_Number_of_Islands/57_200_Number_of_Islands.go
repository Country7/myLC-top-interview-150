package main

/* Задача Количество островов
Дана двумерная двоичная сетка размером m x n, представляющая собой карту единиц (суша) и нулей (вода). Найдите количество островов.
Остров окружён водой и образован путём соединения соседних участков суши по горизонтали или вертикали. Можно считать, что все четыре края сетки окружены водой. */

import (
	"fmt"
)

// ─────────────╮
// Функция numIslands принимает на вход двумерный массив grid
// и возвращает количество "островов".
func numIslands(grid [][]byte) int {
	// Количество строк (m) и столбцов (n)
	m := len(grid)
	if m == 0 {
		return 0
	}
	n := len(grid[0])
	// Счётчик количества островов
	count := 0
	// Вспомогательная функция DFS для обхода острова
	// Она будет рекурсивно "затапливать" все ячейки острова, чтобы их не посчитать повторно.
	var dfs func(int, int)
	dfs = func(i, j int) {
		// Проверяем, что мы не выходим за границы массива
		if i < 0 || j < 0 || i >= m || j >= n {
			return
		}
		// Если текущая ячейка — вода ('0'), то дальше идти не нужно
		if grid[i][j] == '0' {
			return
		}
		// Помечаем текущую землю как посещённую, заменяя '1' на '0'
		grid[i][j] = '0'
		// Рекурсивно идём во все 4 направления: вверх, вниз, влево, вправо
		dfs(i+1, j) // вниз
		dfs(i-1, j) // вверх
		dfs(i, j+1) // вправо
		dfs(i, j-1) // влево
	}
	// Проходим по всей карте
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			// Если нашли землю ('1'), то запускаем DFS
			if grid[i][j] == '1' {
				count++   // нашли новый остров
				dfs(i, j) // "затапливаем" весь остров
			}
		}
	}
	return count
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	grid1 := [][]byte{
		{'1', '1', '1', '1', '0'},
		{'1', '1', '0', '1', '0'},
		{'1', '1', '0', '0', '0'},
		{'0', '0', '0', '0', '0'},
	}
	fmt.Println("Результат для grid1:", numIslands(grid1)) // Ожидается: 1
	// Пример 2
	grid2 := [][]byte{
		{'1', '1', '0', '0', '0'},
		{'1', '1', '0', '0', '0'},
		{'0', '0', '1', '0', '0'},
		{'0', '0', '0', '1', '1'},
	}
	fmt.Println("Результат для grid2:", numIslands(grid2)) // Ожидается: 3
	fmt.Println()
}
