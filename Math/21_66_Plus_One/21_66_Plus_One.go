package main

/* Задача Плюс один
Дано большое целое число, представленное в виде массива целых чисел digits, где каждая цифра digits[i] — это i-я цифра целого числа. Цифры упорядочены слева направо от старшей к младшей. Большое целое число не содержит начальных нулей.
Увеличьте большое целое число на единицу и верните полученный массив цифр.
Ограничения:
1 <= digits.length <= 100
0 <= digits[i] <= 9
Цифры не содержат начальных нулей.  */

import (
	"fmt"
)

// ─────────────╮
// Функция plusOne принимает массив цифр (целых чисел), который представляет большое число,
// и возвращает массив,представляющий число после увеличения на единицу.
func plusOne(digits []int) []int {
	// Идём с конца массива (с самой младшей цифры)
	for i := len(digits) - 1; i >= 0; i-- {
		// Если текущая цифра меньше 9
		if digits[i] < 9 {
			// Просто увеличиваем её на 1
			digits[i]++
			// И можем сразу вернуть результат, так как переносов (carry) дальше не будет
			return digits
		}
		// Если цифра равна 9, то после +1 станет 10, записываем 0 и переносим единицу в следующий разряд
		digits[i] = 0
	}
	// Если дошли до сюда, значит все цифры были 9. Пример: [9,9,9] -> после цикла получится [0,0,0].
	// Нужно добавить ещё одну "1" в начало массива.
	result := make([]int, len(digits)+1)
	result[0] = 1 // Остальные элементы по умолчанию 0.
	return result
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	digits1 := []int{1, 2, 3}
	fmt.Print("Вход:", digits1)
	fmt.Println("   Выход:", plusOne(digits1)) // [1,2,4]
	// Пример 2
	digits2 := []int{4, 3, 2, 1}
	fmt.Print("Вход:", digits2)
	fmt.Println("   Выход:", plusOne(digits2)) // [4,3,2,2]
	// Пример 3
	digits3 := []int{9}
	fmt.Print("Вход:", digits3)
	fmt.Println("   Выход:", plusOne(digits3)) // [1,0]
	// Дополнительный пример
	digits4 := []int{9, 9, 9}
	fmt.Print("Вход:", digits4)
	fmt.Println("   Выход:", plusOne(digits4)) // [1,0,0,0]
	// Дополнительный пример
	digits5 := []int{1, 2, 8, 9, 9, 9}
	fmt.Print("Вход:", digits5)
	fmt.Println("   Выход:", plusOne(digits5)) // [1,0,0,0]
	fmt.Println()
}
