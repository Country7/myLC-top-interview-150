package main

/* Задача Является ли подпоследовательностью
Для двух строк s и t вернуть true, если s является подпоследовательностью t, или false в противном случае.
Подпоследовательность строки — это новая строка, образованная из исходной строки путем удаления некоторых (возможно, ни одного) символов без изменения относительного положения оставшихся символов. (т.е. «ace» является подпоследовательностью «abcde», а «aec» — нет). */

import (
	"fmt"
)

// ─────────────╮
// Функция isSubsequence проверяет, является ли строка s подпоследовательностью строки t
func isSubsequence(s string, t string) bool {
	s_ind := 0 // Указатель для строки s
	t_ind := 0 // Указатель для строки t
	// Пока оба указателя находятся в пределах своих строк
	for s_ind < len(s) && t_ind < len(t) {
		// Если текущие символы совпадают,то "продвигаем" указатель в строке s
		if s[s_ind] == t[t_ind] {
			s_ind++
		}
		// В любом случае двигаем указатель в строке t
		t_ind++
	}
	// Если указатель s_ind дошёл до конца строки s, значит, все символы s были найдены в t в правильном порядке
	return s_ind == len(s)
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры

	// Пример 1: "abc" является подпоследовательностью "ahbgdc"
	s1 := "abc"
	t1 := "ahbgdc"
	fmt.Printf("s = %q, t = %q → %v\n", s1, t1, isSubsequence(s1, t1))

	// Пример 2: "axc" не является подпоследовательностью "ahbgdc"
	s2 := "axc"
	t2 := "ahbgdc"
	fmt.Printf("s = %q, t = %q → %v\n", s2, t2, isSubsequence(s2, t2))

	s3 := ""
	t3 := "ahbgdc" // пустая строка всегда является подпоследовательностью
	fmt.Printf("s = %q, t = %q → %v\n", s3, t3, isSubsequence(s3, t3))

	s4 := "abc"
	t4 := "" // непустая строка не может быть подпоследовательностью пустой
	fmt.Printf("s = %q, t = %q → %v\n", s4, t4, isSubsequence(s4, t4))

}
