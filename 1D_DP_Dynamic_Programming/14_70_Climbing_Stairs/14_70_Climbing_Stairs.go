package main

/* Задача Подъём по лестнице
Вы поднимаетесь по лестнице. Чтобы достичь вершины, нужно сделать n ступенек.
Каждый раз вы можете подняться на 1 или 2 ступеньки. Сколькими способами вы можете подняться на вершину?
Ограничения:
1 <= n <= 45   */

/* Решение: Эта задача аналогична задаче про числа Фибоначчи.
Каждый раз, чтобы попасть на n-ю ступеньку, мы можем оказаться либо на (n-1) и сделать шаг 1, либо на (n-2) и сделать шаг 2.
Поэтому: dp[n]=dp[n−1]+dp[n−2]
Начальные значения: dp[1] = 1,  dp[2] = 2   */

import (
	"fmt"
)

// ─────────────╮
// Функция вычисляет количество различных способов подняться на лестницу из n ступенек,
// если за один шаг можно подняться либо на 1, либо на 2 ступеньки.
func climbStairs(n int) int {
	// Базовые случаи: Если n == 1, то существует только 1 способ: шагнуть на 1 ступеньку.
	if n == 1 {
		return 1
	}
	// Для удобства создадим массив dp, где dp[i] будет хранить количество способов подняться на i-ю ступеньку.
	dp := make([]int, n+1)

	// Начальные условия: На 1-ю ступеньку можно попасть только одним способом — сделать шаг на 1.
	dp[1] = 1
	// На 2-ю ступеньку можно попасть двумя способами: (1+1) или (2).
	dp[2] = 2

	// Для каждой следующей ступеньки i:
	// Количество способов попасть на неё = количество способов попасть на (i-1)-ю + (i-2)-ю.
	// Потому что на i-ю можно попасть либо шагнув с (i-1)-й (шаг на 1), либо с (i-2)-й (шаг на 2).
	for i := 3; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	// Ответ — количество способов попасть на n-ю ступеньку.
	return dp[n]
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры
	fmt.Println("Ступенек 2, вариантов:", climbStairs(2))        // Ожидается: 2
	fmt.Println("Ступенек 3, вариантов:", climbStairs(3))        // Ожидается: 3
	fmt.Println("Ступенек 5, вариантов:", climbStairs(5), "\n ") // Ожидается: 8
}
