package main

/* Задача Грабитель домов
Вы — профессиональный грабитель, планирующий ограбление домов на улице. В каждом доме спрятана определённая сумма денег. Единственное ограничение, которое мешает вам ограбить каждый из них, — это то, что в соседних домах подключены системы безопасности, которые автоматически свяжутся с полицией, если в одну ночь будут взломаны два соседних дома.
Дан массив целых чисел nums, представляющий сумму денег в каждом доме. Верните максимальную сумму, которую вы можете ограбить сегодня ночью, не привлекая внимания полиции. */

import (
	"fmt"
)

// ─────────────╮
// Функция rob решает задачу "House Robber"
// nums - массив, где каждый элемент представляет количество денег в доме
func rob(nums []int) int {
	n := len(nums)
	if n == 0 {
		// Если домов нет, воровать нечего
		return 0
	}
	if n == 1 {
		// Если только один дом, забираем его деньги
		return nums[0]
	}
	// Создаем массив dp, где dp[i] - максимальная сумма, которую можно украсть
	// рассматривая первые i+1 домов
	dp := make([]int, n)
	// Базовые случаи
	dp[0] = nums[0]               // Только первый дом
	dp[1] = max(nums[0], nums[1]) // Выбираем максимум между первым и вторым домом
	// Заполняем dp массив начиная с третьего дома
	for i := 2; i < n; i++ {
		// Для текущего дома есть два варианта:
		// 1) Не воровать в этом доме -> dp[i-1]
		// 2) Воровать в этом доме -> nums[i] + dp[i-2] (так как предыдущий дом нельзя трогать)
		dp[i] = max(dp[i-1], nums[i]+dp[i-2])
	}
	// Максимальная сумма для всех домов будет в последнем элементе dp
	return dp[n-1]
}

// Вспомогательная функция для вычисления максимума двух чисел
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{1, 2, 3, 1}
	fmt.Println("Максимальная сумма для [1,2,3,1]:", rob(nums1)) // Ожидаемый результат: 4
	// Пример 2
	nums2 := []int{2, 7, 9, 3, 1}
	fmt.Println("Максимальная сумма для [2,7,9,3,1]:", rob(nums2)) // Ожидаемый результат: 12
	fmt.Println()
}
