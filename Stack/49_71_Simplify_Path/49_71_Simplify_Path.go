package main

/* Задача Упростите путь
Вам дан абсолютный путь к файловой системе в стиле Unix, который всегда начинается со слэша «/». Ваша задача — преобразовать этот абсолютный путь в упрощённый канонический путь.
Правила файловой системы в стиле Unix следующие:
Одна точка «.» обозначает текущий каталог.
Две точки «..» обозначают предыдущий/родительский каталог.
Несколько последовательных слэшей, таких как «//» и «///», рассматриваются как одна косая черта «/».
Любая последовательность точек, не соответствующая приведенным выше правилам, должна рассматриваться как допустимое имя каталога или файла. Например, «...» и «....» являются допустимыми именами каталогов или файлов.
Упрощённый канонический путь должен соответствовать следующим правилам:
Путь должен начинаться с одной косой черты «/».
Каталоги в пути должны быть разделены ровно одной косой чертой «/». Путь не должен заканчиваться слешем «/», за исключением корневого каталога.
В пути не должно быть одинарных или двойных точек ('.' и '..'), используемых для обозначения текущего или родительского каталогов.
Возвращает упрощённый канонический путь. */

import (
	"fmt"
	"strings"
)

// ─────────────╮
// simplifyPath принимает абсолютный Unix путь и возвращает его упрощённую каноническую версию
func simplifyPath(path string) string {
	// Разделяем путь по символу '/' на сегменты
	// Например: "/home//foo/" -> ["", "home", "", "foo", ""]
	parts := strings.Split(path, "/")
	// Используем стек для построения канонического пути
	var stack []string
	for _, part := range parts {
		// Пропускаем пустые строки и текущий каталог "."
		if part == "" || part == "." {
			continue
		}
		if part == ".." {
			// ".." означает подняться на один уровень вверх
			// Если стек не пустой, удаляем последний элемент
			if len(stack) > 0 {
				stack = stack[:len(stack)-1]
			}
		} else {
			// Все остальные имена директорий добавляем в стек
			stack = append(stack, part)
		}
	}
	// Собираем канонический путь из элементов стека
	// Если стек пустой, возвращаем корень "/"
	canonicalPath := "/" + strings.Join(stack, "/")
	return canonicalPath
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры использования функции
	testPaths := []string{
		"/home/",
		"/home//foo/",
		"/home/user/Documents/../Pictures",
		"/../",
		"/.../a/../b/c/../d/./",
	}
	for _, path := range testPaths {
		fmt.Printf("Input: %s\nOutput: %s\n\n", path, simplifyPath(path))
	}
	fmt.Println()
}
