package main

/* Задача Корректные скобки
Для строки s, содержащей только символы '(', ')', '{', '}', '[' и ']', определите, является ли входная строка корректной. Входная строка корректна, если:
Открывающие скобки должны закрываться скобками того же типа.
Открывающие скобки должны закрываться в правильном порядке.
Каждой закрывающей скобке соответствует открывающая скобка того же типа.
Ограничения:
1 <= s.length <= 104
s состоит только из скобок '()[]{}'.  */

import (
	"fmt"
)

// ─────────────╮
// Функция isValid проверяет, является ли строка корректной скобочной последовательностью
func isValid(s string) bool {
	// Ограничение по длине: 1 <= s.length <= 10^4
	if len(s) < 1 || len(s) > 10000 {
		return false
	}
	// Стек для хранения открывающих скобок
	stack := []rune{}
	// Словарь для сопоставления закрывающих и открывающих скобок
	brackets := map[rune]rune{
		')': '(',
		']': '[',
		'}': '{',
	}
	// Проходим по всем символам строки
	for _, char := range s {
		// Если символ — открывающая скобка, добавляем в стек
		if char == '(' || char == '[' || char == '{' {
			stack = append(stack, char)
		} else {
			// Иначе это должна быть закрывающая скобка
			// Проверка: стек не должен быть пустым
			if len(stack) == 0 {
				return false
			}
			// Берём верхний элемент стека
			top := stack[len(stack)-1]
			// Проверяем, соответствует ли закрывающая скобка открывающей
			if brackets[char] != top {
				return false
			}
			// Удаляем верхний элемент стека
			stack = stack[:len(stack)-1]
		}
	}
	// В конце стек должен быть пустым
	return len(stack) == 0
}

// ─────────────╯

// ─────────────╮
func main() {
	// Примеры
	tests := []string{"()", "()[]{}", "(]", "([])", "([)]"}

	for _, t := range tests {
		fmt.Printf("Вход: %s -> Выход: %v\n", t, isValid(t))
	}
}
