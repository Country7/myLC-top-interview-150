package main

import "fmt"

/* Задача 128. Самая длинная последовательная последовательность
Дан несортированный массив целых чисел nums. Найдите длину самой длинной последовательности последовательных элементов.
Напишите алгоритм, работающий за время O(n).

Пример 1:
Входные данные: nums = [100, 4, 200, 1, 3, 2]
Выходные данные: 4
Пояснение: Самая длинная последовательная последовательность элементов — [1, 2, 3, 4]. Следовательно, её длина равна 4.

Пример 2:
Входные данные: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]
Выходные данные: 9

Пример 3:
Входные данные: nums = [1, 0, 1, 2]
Выходные данные: 3  */

func longestConsecutive(nums []int) int {
	if len(nums) == 0 {
		return 0
	}

	// Создаём map для быстрого поиска числа
	// Массив может быть большим, поэтому лучше сразу указать размер
	numSet := make(map[int]bool, len(nums))

	for _, num := range nums {
		numSet[num] = true
	}

	// максимальная длина последовательности
	maxLength := 0

	// Если итерироваться дальне по nums, то будет O(n^2) и
	// не пройдет тест при большом массиве, напишет Time Limit Exceeded
	// в nums могут быть дубликаты, будет запускаться пере-поиск последовательности
	// Поэтому итерируемся по множеству numSet, что дает O(n)
	for num := range numSet {

		// Проверяем, является ли текущее число началом последовательности
		// Начало — если нет числа num-1 в наборе
		if !numSet[num-1] {
			currNum := num
			currCount := 1 // длина текущей последовательности

			// Пока есть последующее число — увеличиваем последовательность
			for numSet[currNum+1] {
				currNum++
				currCount++
			}

			// Обновляем максимальную длину последовательности
			if currCount > maxLength {
				maxLength = currCount
			}
		}
	}

	return maxLength
}

func main() {
	fmt.Println(longestConsecutive([]int{100, 4, 200, 1, 3, 2}))         // 4
	fmt.Println(longestConsecutive([]int{0, 3, 7, 2, 5, 8, 4, 6, 0, 1})) // 9
	fmt.Println(longestConsecutive([]int{1, 0, 1, 2}))                   // 3
}
