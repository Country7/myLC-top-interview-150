package main

/* Задача Сумма двух чисел
Дан массив целых чисел nums и целочисленное значение target. Верните индексы двух чисел так, чтобы их сумма равнялась target.
Можно предположить, что каждое входное значение имеет ровно одно решение, и нельзя использовать один и тот же элемент дважды.
Вы можете вернуть ответ в любом порядке. */

import (
	"fmt"
)

// ─────────────╮
// Функция принимает массив чисел (nums) и целевое число (target),
// и возвращает индексы двух элементов массива, сумма которых равна target.
func twoSum(nums []int, target int) []int {
	// Создаем хэш-таблицу (map), в которой будем хранить: число из массива -> его индекс
	// Это позволяет быстро (за O(1)) проверять, встречали ли мы уже нужное число.
	numsMap := make(map[int]int)
	// Проходим по массиву чисел
	for i, num := range nums {
		// Вычисляем, какое число нужно найти, чтобы в сумме с текущим получилось target
		complement := target - num
		// Проверяем, есть ли это число в хэш-таблице
		if index, found := numsMap[complement]; found {
			// Если нашли, возвращаем индексы:
			// индекс числа complement (которое мы сохранили ранее) и текущий индекс i
			return []int{index, i}
		}
		// Если нужное число не найдено, сохраняем текущее число и его индекс в map
		numsMap[num] = i
	}
	// Так как по условию задачи всегда есть решение, до этого места мы не дойдем.
	return nil
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{2, 7, 11, 15}
	target1 := 9
	fmt.Println("Пример 1: nums=", nums1, "target=", target1, "Индексы:", twoSum(nums1, target1)) // Ожидаем: [0,1]
	// Пример 2
	nums2 := []int{3, 2, 4}
	target2 := 6
	fmt.Println("Пример 2 nums=", nums2, "target=", target2, "Индексы::", twoSum(nums2, target2)) // Ожидаем: [1,2]
	// Пример 3
	nums3 := []int{3, 3}
	target3 := 6
	fmt.Println("Пример 3 nums=", nums3, "target=", target3, "Индексы::", twoSum(nums3, target3)) // Ожидаем: [0,1]
	fmt.Println()
}
