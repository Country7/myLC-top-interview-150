package main

/* Задача Счастливое число
Напишите алгоритм для определения, является ли число n счастливым.
Счастливое число — это число, определяемое следующим образом:
Начиная с любого положительного целого числа, замените число суммой квадратов его цифр.
Повторяйте процесс, пока число не станет равным 1 (на котором оно и останется), или пока цикл не зациклится до бесконечности, не включая 1.
Те числа, для которых этот процесс заканчивается на 1, являются счастливыми.
Возвращайте true, если n — счастливое число, и false в противном случае.
Пример 1:
Входные данные: n = 19
Выходные данные: true
Пояснение:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1   */

import (
	"fmt"
)

// ─────────────╮
// Функция проверяет, является ли число n "счастливым"
func isHappy(n int) bool {
	// Используем map для хранения уже встреченных чисел
	// Это поможет выявить цикл: если число повторяется, значит процесс зациклился
	seen := make(map[int]bool)
	// Пока число не равно 1 и не встречалось ранее
	for n != 1 && !seen[n] {
		// Запоминаем, что это число уже встречалось
		seen[n] = true
		// Вычисляем новую сумму квадратов цифр числа
		n = sumOfSquares(n)
	}
	// Если мы вышли из цикла потому что n == 1 → число счастливое
	// Если из-за повторения (цикл) → число несчастливое
	return n == 1
}

// Вспомогательная функция для вычисления суммы квадратов цифр числа
func sumOfSquares(n int) int {
	sum := 0
	for n > 0 {
		digit := n % 10      // Получаем последнюю цифру числа
		sum += digit * digit // Добавляем квадрат цифры к сумме
		n = n / 10           // Убираем последнюю цифру числа
	}
	return sum
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	n1 := 19
	fmt.Printf("Число %d счастливое? %v\n", n1, isHappy(n1)) // Ожидается: true
	// Пример 2
	n2 := 2
	fmt.Printf("Число %d счастливое? %v\n", n2, isHappy(n2)) // Ожидается: false
	fmt.Println()
}
