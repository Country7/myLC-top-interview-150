package main

/* Задача
Вам дан отсортированный уникальный целочисленный массив nums.
Диапазон [a, b] — это множество всех целых чисел от a до b (включительно).
Вернуть наименьший отсортированный список диапазонов, который полностью охватывает все числа в массиве. То есть каждый элемент массива nums попадает ровно в один из диапазонов, и не существует целого числа x, такого, что x входит в один из диапазонов, но не входит в nums.
Каждый диапазон [a,b] в списке должен быть выведен как:
"a->b", если a != b
"a", если a == b
Ограничения:
0 <= nums.length <= 20
-231 <= nums[i] <= 231 - 1
Все значения nums уникальны.
nums сортируется по возрастанию.  */

import (
	"fmt"
	"strconv"
)

// ─────────────╮
// summaryRanges принимает отсортированный массив уникальных чисел
// и возвращает минимальный список диапазонов в формате строк.
func summaryRanges(nums []int) []string {
	// Результат, который будем возвращать
	var result []string

	// Проверка на пустой массив (по условию: 0 <= nums.length <= 20)
	if len(nums) == 0 {
		return result // Возвращаем пустой список
	}

	// Начало текущего диапазона
	start := nums[0]

	// Идем по массиву и находим границы диапазонов
	for i := 1; i <= len(nums); i++ {
		// Условие окончания диапазона:
		// - либо дошли до конца массива (i == len(nums))
		// - либо текущий элемент nums[i] не является продолжением предыдущего, (т.е. nums[i] != nums[i-1] + 1)
		if i == len(nums) || nums[i] != nums[i-1]+1 {
			end := nums[i-1] // конец текущего диапазона

			if start == end {
				// Если диапазон состоит из одного числа
				result = append(result, strconv.Itoa(start)) // Integer to ASCII
			} else {
				// Если диапазон содержит несколько чисел
				result = append(result, strconv.Itoa(start)+"->"+strconv.Itoa(end))
			}

			// Если ещё не конец массива, то начинаем новый диапазон
			if i < len(nums) {
				start = nums[i]
			}
		}
	}
	return result
}

// ─────────────╯

// ─────────────╮
func main() {
	// Примеры из условия задачи

	// Example 1
	nums1 := []int{0, 1, 2, 4, 5, 7}
	fmt.Println("Input:", nums1)
	fmt.Println("Output:", summaryRanges(nums1))
	// Ожидаемый результат: ["0->2", "4->5", "7"]

	// Example 2
	nums2 := []int{0, 2, 3, 4, 6, 8, 9}
	fmt.Println("Input:", nums2)
	fmt.Println("Output:", summaryRanges(nums2))
	// Ожидаемый результат: ["0", "2->4", "6", "8->9"]

	// Дополнительные проверки
	nums3 := []int{}
	fmt.Println("Input:", nums3)
	fmt.Println("Output:", summaryRanges(nums3))
	// Ожидаемый результат: [] (пустой массив)

	nums4 := []int{5}
	fmt.Println("Input:", nums4)
	fmt.Println("Output:", summaryRanges(nums4))
	// Ожидаемый результат: ["5"]
}
