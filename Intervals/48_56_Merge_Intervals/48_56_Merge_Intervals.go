package main

/* Задача Объединение интервалов
Дан массив интервалов, где intervals[i] = [starti, endi], объединить все перекрывающиеся интервалы и вернуть массив неперекрывающихся интервалов, охватывающих все интервалы во входных данных. */

import (
	"fmt"
	"sort"
)

// ─────────────╮
// Функция принимает на вход двумерный срез intervals, где каждый элемент — это интервал вида [start, end].
// Функция возвращает новый срез интервалов, в котором все пересекающиеся интервалы объединены.
func merge(intervals [][]int) [][]int {
	// Если входной массив пустой или содержит один интервал, возвращаем его как есть
	if len(intervals) <= 1 {
		return intervals
	}
	// 1. Сортируем интервалы по начальному значению (start).
	// Если start одинаковый, порядок по end не важен.
	sort.Slice(intervals, func(i, j int) bool {
		return intervals[i][0] < intervals[j][0]
	})
	// 2. Создаём результирующий срез и добавляем туда первый интервал
	result := [][]int{intervals[0]}
	// 3. Перебираем все интервалы, начиная со второго
	for i := 1; i < len(intervals); i++ {
		// Берём последний добавленный интервал из результата
		last := result[len(result)-1]
		// Текущий интервал
		current := intervals[i]
		// Проверяем, пересекаются ли интервалы: Условие пересечения: start текущего <= end последнего
		if current[0] <= last[1] {
			// Обновляем конец последнего интервала, берём максимум между last[1] и current[1]
			if current[1] > last[1] {
				last[1] = current[1]
			}
			// Обновлённый last уже в result, поэтому отдельно добавлять не нужно
		} else {
			// Если пересечения нет, просто добавляем новый интервал в результат
			result = append(result, current)
		}
	}
	return result
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры из условия задачи
	ex1 := [][]int{{1, 3}, {2, 6}, {8, 10}, {15, 18}}
	ex2 := [][]int{{1, 4}, {4, 5}}
	ex3 := [][]int{{4, 7}, {1, 4}}
	fmt.Println("Пример 1:", ex1, " -> Результат:", merge(ex1), "\n ") // [[1,6],[8,10],[15,18]]
	fmt.Println("Пример 2:", ex2, " -> Результат:", merge(ex2), "\n ") // [[1,5]]
	fmt.Println("Пример 3:", ex3, " -> Результат:", merge(ex3), "\n ") // [[1,7]]
	fmt.Println()
}
