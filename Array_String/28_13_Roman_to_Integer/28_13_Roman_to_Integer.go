package main

/* Задача Римские цифры в целые
Римские цифры представлены семью различными символами: I, V, X, L, C, D и M.
Символ Значение
I 1
V 5
X 10
L 50
C 100
D 500
M 1000
Например, 2 в римской системе счисления записывается как II, то есть просто сложение двух единиц. 12 записывается как XII, что равно X + II. Число 27 записывается как XXVII, что равно XX + V + II.
Римские цифры обычно записываются слева направо от большего к меньшему. Однако число четыре не равно IIII. Вместо этого число четыре записывается как IV. Поскольку единица стоит перед пятеркой, мы вычитаем её, получая четыре. Тот же принцип применим к числу девять, которое записывается как IX. Вычитание используется в шести случаях:
I можно поставить перед V (5) и X (10), чтобы получить 4 и 9.
X можно поставить перед L (50) и C (100), чтобы получить 40 и 90.
C можно поставить перед D (500) и M (1000), чтобы получить 400 и 900.
Данную римскую цифру преобразуйте в целое число. */

import (
	"fmt"
)

// ─────────────╮
// Быстрый и элегантный вариант функции переводит римское число в строковом виде в целое число
func fastRomanToInt(s string) int {
	conversionMap := map[rune]int{
		'I': 1,
		'V': 5,
		'X': 10,
		'L': 50,
		'C': 100,
		'D': 500,
		'M': 1000,
	}
	// result — переменная, где будем накапливать итоговое значение
	var result int
	// lastValue — хранит значение предыдущего символа римского числа
	// Нужно для того, чтобы корректно обработать случаи вычитания (например, IV = 4)
	var lastValue int
	// Проходим по строке посимвольно. "c" — это символ (руна), соответствующая текущему римскому знаку
	for _, c := range s {
		// Получаем числовое значение текущего символа из словаря
		// Например: 'I' → 1, 'V' → 5, 'X' → 10 и т.д.
		currentValue := conversionMap[c]
		// Добавляем текущее значение к результату
		result += currentValue
		// Проверяем, не меньше ли предыдущее значение текущего. Если да, значит это случай вычитания.
		// Пример: в "IV" сначала прибавили I (1), потом V (5) → стало 6.
		// Но на самом деле IV = 4, значит нужно скорректировать.
		if lastValue < currentValue {
			// Вычитаем удвоенное значение предыдущего символа:
			// 1) один раз — чтобы отменить то, что мы уже прибавили ранее
			// 2) второй раз — чтобы учесть правило вычитания
			result -= 2 * lastValue
		}
		// Обновляем "lastValue", чтобы на следующей итерации сравнивать с этим символом
		lastValue = currentValue
	}
	// Возвращаем окончательный результат
	return result
}

// Функция принимает строку с римским числом и возвращает его целочисленное значение
func romanToInt(s string) int {
	// Создаём словарь (map) соответствий символов римских чисел и их значений
	romanMap := map[byte]int{
		'I': 1,
		'V': 5,
		'X': 10,
		'L': 50,
		'C': 100,
		'D': 500,
		'M': 1000,
	}
	// Переменная для хранения результата
	result := 0
	// Проходим по всем символам строки. Не использовал range s, потому что в Go строка (string) — это последовательность байтов, а range по строке возвращает руны (rune), то есть Unicode-коды символов
	for i := 0; i < len(s); i++ {
		// Берём значение текущего символа
		value := romanMap[s[i]]
		// Проверяем, есть ли следующий символ (чтобы не выйти за пределы строки)
		if i+1 < len(s) {
			// Берём значение следующего символа
			nextValue := romanMap[s[i+1]]
			// Если текущее значение меньше следующего — значит используется правило вычитания
			// Например: IV (1 перед 5), IX (1 перед 10), XL (10 перед 50) и т.д.
			if value < nextValue {
				// Тогда вычитаем текущее значение
				result -= value
				continue
			}
		}
		// В противном случае просто прибавляем текущее значение
		result += value
	}
	return result
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры
	fmt.Println("Римское число: III,  целое число:", fastRomanToInt("III"))         // Ожидается: 3
	fmt.Println("Римское число: LVIII,  целое число:", fastRomanToInt("LVIII"))     // Ожидается: 58
	fmt.Println("Римское число: MCMXCIV,  целое число:", fastRomanToInt("MCMXCIV")) // Ожидается: 1994
	fmt.Println()
	// Примеры
	fmt.Println("Римское число: III,  целое число:", romanToInt("III"))         // Ожидается: 3
	fmt.Println("Римское число: LVIII,  целое число:", romanToInt("LVIII"))     // Ожидается: 58
	fmt.Println("Римское число: MCMXCIV,  целое число:", romanToInt("MCMXCIV")) // Ожидается: 1994
	fmt.Println()
}
