package main

/* Задача Объединение отсортированных массивов
Даны два целочисленных массива nums1 и nums2, отсортированных по неубыванию, и два целых числа m и n, представляющих количество элементов в nums1 и nums2 соответственно.
Объедините nums1 и nums2 в один массив, отсортированный по неубыванию.
Функция не должна возвращать итоговый отсортированный массив, а должна хранить его внутри массива nums1. Для этого nums1 имеет длину m + n, где первые m элементов обозначают элементы, которые нужно объединить, а последние n элементов устанавливаются в 0 и должны игнорироваться. nums2 имеет длину n.
Ограничения:
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-10^9 <= nums1[i], nums2[j] <= 10^9   */

import (
	"fmt"
)

// ─────────────╮
// merge объединяет два отсортированных массива nums1 и nums2 в один, ... в соответствии с условием
func merge(nums1 []int, m int, nums2 []int, n int) {
	// Указатель на последний "полезный" элемент в nums1
	i := m - 1
	// Указатель на последний элемент в nums2
	j := n - 1
	// Указатель на последнюю позицию в nums1 (куда будем вставлять элементы)
	k := m + n - 1

	// Пока есть элементы в nums2 и nums1
	for i >= 0 && j >= 0 {
		// Сравниваем последний элемент nums1 и nums2
		if nums1[i] > nums2[j] {
			// Если элемент из nums1 больше, ставим его в конец
			nums1[k] = nums1[i]
			i-- // двигаем указатель nums1 влево
		} else {
			// Если элемент из nums2 больше или равен, ставим его в конец
			nums1[k] = nums2[j]
			j-- // двигаем указатель nums2 влево
		}
		k-- // в любом случае смещаем конечный указатель влево
	}

	// Если остались элементы в nums2 (nums1 закончился раньше),
	// то копируем оставшиеся элементы nums2 в начало nums1
	for j >= 0 {
		nums1[k] = nums2[j]
		j--
		k--
	}

	// Если остались элементы в nums1, то ничего делать не нужно —
	// они уже находятся на своих местах.
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{1, 2, 3, 0, 0, 0}
	m := 3
	nums2 := []int{2, 5, 6}
	n := 3
	merge(nums1, m, nums2, n)
	fmt.Println(nums1) // [1 2 2 3 5 6]

	// Пример 2
	nums1 = []int{1}
	m = 1
	nums2 = []int{}
	n = 0
	merge(nums1, m, nums2, n)
	fmt.Println(nums1) // [1]

	// Пример 3
	nums1 = []int{0}
	m = 0
	nums2 = []int{1}
	n = 1
	merge(nums1, m, nums2, n)
	fmt.Println(nums1, "\n ") // [1]
}
