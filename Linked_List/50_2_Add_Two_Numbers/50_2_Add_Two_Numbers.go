package main

/* Задача Сложение двух чисел
Даны два непустых связанных списка, представляющих два неотрицательных целых числа. Цифры хранятся в обратном порядке, и каждый из их узлов содержит одну цифру. Сложите два числа и верните сумму в виде связанного списка.
Можно предположить, что два числа не содержат начальных нулей, кроме самого числа 0.
Пример 1:
Входные данные: l1 = [2,4,3], l2 = [5,6,4]
Выходные данные: [7,0,8]
Пояснение: 342 + 465 = 807.   */

import (
	"fmt"
)

// Определение структуры для узла связанного списка
type ListNode struct {
	Val  int       // Значение узла (цифра числа)
	Next *ListNode // Ссылка на следующий узел
}

// ─────────────╮
// Функция сложения двух чисел, представленных в виде связанных списков
// Ускорить функцию можно убрав дублирующие проверки if l1 != nil, вогнав l1 = l1.Next в первую проверку
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
	// Создаём "фиктивный" узел, чтобы упростить работу с результирующим списком
	dummyHead := &ListNode{}
	// Указатель на текущую позицию в результирующем списке
	current := dummyHead
	// Переменная для хранения переноса (carry), если сумма двух цифр >= 10
	carry := 0
	// Пока есть хотя бы один узел в l1 или l2, или остался перенос
	for l1 != nil || l2 != nil || carry > 0 {
		// Извлекаем значения из текущих узлов списков
		var x, y int
		if l1 != nil {
			x = l1.Val
		}
		if l2 != nil {
			y = l2.Val
		}
		// Суммируем цифры и перенос
		sum := x + y + carry
		// Обновляем перенос (например, 15 -> перенос 1, значение в узле 5)
		carry = sum / 10
		// Создаём новый узел с цифрой суммы (sum % 10)
		// % - остаток от целочисленного деления 7%10=7  15%10=5
		current.Next = &ListNode{Val: sum % 10}
		// Переходим к следующему узлу результата
		current = current.Next
		// Двигаемся дальше по спискам l1 и l2 (если они ещё не закончились)
		if l1 != nil {
			l1 = l1.Next
		}
		if l2 != nil {
			l2 = l2.Next
		}
	}
	// Возвращаем список, начиная со следующего узла после фиктивного
	return dummyHead.Next
}

// Вспомогательная функция: создаёт список из массива чисел
func createList(nums []int) *ListNode {
	if len(nums) == 0 {
		return nil
	}
	head := &ListNode{Val: nums[0]}
	current := head
	for _, v := range nums[1:] {
		current.Next = &ListNode{Val: v}
		current = current.Next
	}
	return head
}

// Вспомогательная функция: выводит список в удобном виде
func printList(l *ListNode) {
	for l != nil {
		fmt.Print(l.Val)
		if l.Next != nil {
			fmt.Print(" -> ")
		}
		l = l.Next
	}
	fmt.Println()
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1: [2,4,3] + [5,6,4] = [7,0,8]
	fmt.Println("Пример 1: [2,4,3] + [5,6,4] = [7,0,8]")
	l1 := createList([]int{2, 4, 3})
	l2 := createList([]int{5, 6, 4})
	result := addTwoNumbers(l1, l2)
	fmt.Print("Результат 1: ")
	printList(result)
	// Пример 2: [0] + [0] = [0]
	fmt.Println("\nПример 2: [0] + [0] = [0]")
	l3 := createList([]int{0})
	l4 := createList([]int{0})
	result2 := addTwoNumbers(l3, l4)
	fmt.Print("Результат 2: ")
	printList(result2)
	// Пример 3: [9,9,9,9,9,9,9] + [9,9,9,9] = [8,9,9,9,0,0,0,1]
	fmt.Println("\nПример 3: [9,9,9,9,9,9,9] + [9,9,9,9] = [8,9,9,9,0,0,0,1]")
	l5 := createList([]int{9, 9, 9, 9, 9, 9, 9})
	l6 := createList([]int{9, 9, 9, 9})
	result3 := addTwoNumbers(l5, l6)
	fmt.Print("Результат 3: ")
	printList(result3)
	fmt.Println()
}
