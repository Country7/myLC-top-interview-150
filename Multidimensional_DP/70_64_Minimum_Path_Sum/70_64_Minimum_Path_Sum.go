package main

/* Задача Минимальная сумма пути
Дана сетка m x n, заполненная неотрицательными числами. Найдите путь из левого верхнего угла в правый нижний, минимизирующий сумму всех чисел на этом пути.
Примечание: В любой момент времени можно двигаться только вниз или вправо. */

import (
	"fmt"
)

// ─────────────╮
// Функция находит минимальную сумму пути от верхнего левого угла до нижнего правого
func minPathSum(grid [][]int) int {
	// Получаем размеры сетки
	m := len(grid)
	n := len(grid[0])
	// Создаем двумерный срез dp того же размера, что и grid
	// dp[i][j] будет хранить минимальную сумму пути до клетки (i, j)
	dp := make([][]int, m)
	for i := range dp {
		dp[i] = make([]int, n)
	}
	// Инициализируем верхний левый угол
	dp[0][0] = grid[0][0]
	// Заполняем первую строку (можем двигаться только вправо)
	for j := 1; j < n; j++ {
		dp[0][j] = dp[0][j-1] + grid[0][j]
	}
	// Заполняем первый столбец (можем двигаться только вниз)
	for i := 1; i < m; i++ {
		dp[i][0] = dp[i-1][0] + grid[i][0]
	}
	// Заполняем оставшуюся сетку
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			// Минимальная сумма для клетки (i, j) = min(сумма сверху, сумма слева) + текущая клетка
			if dp[i-1][j] < dp[i][j-1] {
				dp[i][j] = dp[i-1][j] + grid[i][j]
			} else {
				dp[i][j] = dp[i][j-1] + grid[i][j]
			}
		}
	}
	fmt.Println("Расчеты dp:")
	printGrid(dp)
	// Возвращаем значение в правом нижнем углу — минимальную сумму пути
	return dp[m-1][n-1]
}

// ─────────────╯

func printGrid(grid [][]int) {
	for _, str := range grid {
		fmt.Println(str)
	}
}

// ─────────────╮╰──>
func main() {
	fmt.Println()
	grid1 := [][]int{
		{1, 3, 1},
		{1, 5, 1},
		{4, 2, 1},
	}
	fmt.Println("Сетка:")
	printGrid(grid1)
	fmt.Println("Минимальная сумма пути:", minPathSum(grid1), "\n ") // Ожидаемый результат: 7
	grid2 := [][]int{
		{1, 2, 3},
		{4, 5, 6},
	}
	fmt.Println("Сетка:")
	printGrid(grid2)
	fmt.Println("Минимальная сумма пути:", minPathSum(grid2)) // Ожидаемый результат: 12
	fmt.Println()
}
