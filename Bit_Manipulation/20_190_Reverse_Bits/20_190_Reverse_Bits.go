package main

/* Задача Обратные биты
Обратные биты заданного 32-битного знакового целого числа.
Ограничения:
0 <= n <= 2^31 - 2
n — чётное число.   */

import (
	"fmt"
)

// ─────────────╮
// Функция принимает 32-битное целое число (int32)
// и возвращает его значение после переворота всех битов.
func reverseBits(n int) int {
	var result uint32 = 0 // здесь мы будем накапливать итоговое число (uint - без знака)
	// В 32-битном числе всегда ровно 32 бита, поэтому выполняем цикл ровно 32 раза
	x := uint32(n)                                // приведение int -> uint32
	fmt.Printf("   ╰──> Начальное x: %032b\n", x) // показываем x в 32-битном виде
	for i := 0; i < 32; i++ {
		// 1. Сдвигаем результат влево на 1 бит, освобождая место для следующего бита, освобождаем младший бит
		// В Go оператор << — это побитовый сдвиг влево. эквивалентно result = result << 1
		// result <<= 1 подготовил «слот» для нового бита (новый младший бит равен 0)
		result <<= 1
		// 2. Берём последний (правый) бит числа x с помощью x & 1. Если он равен 1, то добавляем его к result
		// т.е. записываем в этот младший бит текущий последний бит x.
		// & — побитовое AND;  (x & 1) берёт двоичное представление x и логически И с ...0001,
		// то есть извлекает младший (правый) бит числа x. Результат будет либо 0, либо 1
		// | — побитовое OR: бит результата равен 1, если хотя бы один из соответствующих битов операндов = 1.
		// Поскольку x в нашем случае — либо 0, либо 1, операция result |= x меняет только младший бит result:
		// если x == 0 — result остаётся без изменений;
		// если x == 1 — младший бит result устанавливается в 1
		// (x & 1) — взял текущий последний бит из x.
		// result |= (x & 1) — поместил этот бит в освобождённый слот (LSB) в result
		result |= (x & 1)
		// 3. Сдвигаем x вправо на 1 бит, чтобы обработать следующий бит, чтобы следующий бит стал последним
		fmt.Printf("   ╰──> lastBit= %d,  result= %032b,  x= %032b\n", (x & 1), result, x)
		x >>= 1
	}
	// Возвращаем перевёрнутое число
	return int(result) // возвращаем как int
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	// Пример 1
	n1 := int(43261596)
	fmt.Println("\nInput:", n1)
	res := reverseBits(n1)
	fmt.Println("Output:", res) // Ожидается 964176192
	fmt.Printf("Output (binary): %032b\n\n", res)
	// Пример 2
	n2 := int(2147483644)
	fmt.Println("Input:", n2)
	res = reverseBits(n2)
	fmt.Println("Output:", res) // Ожидается 1073741822
	fmt.Printf("Output (binary): %032b\n\n", res)
}
