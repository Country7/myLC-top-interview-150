package main

/* Задача Количество единичных битов
Для заданного положительного целого числа n напишите функцию, которая возвращает количество установленных битов в его двоичном представлении (также известное как вес Хэмминга).
Ограничения:
1 <= n <= 2^31 - 1   */

import (
	"fmt"
)

// ─────────────╮
// Функция считает количество установленных битов (равных 1) в двоичном представлении числа n.
func hammingWeight(n int) int {
	// Переменная для подсчета количества единиц
	count := 0
	// Цикл продолжается, пока n не станет равным 0
	for n > 0 {
		// Оператор & (побитовое И) проверяет младший бит числа
		// Если младший бит равен 1, то (n & 1) == 1, иначе 0
		count += n & 1
		// Сдвигаем число вправо на 1 бит, чтобы проверить следующий бит
		n >>= 1
	}
	return count
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры
	fmt.Println(hammingWeight(11))         // 3 (1011 → три единицы)
	fmt.Println(hammingWeight(128))        // 1 (10000000 → одна единица)
	fmt.Println(hammingWeight(2147483645)) // 30 (111...1101 → тридцать единиц)
	fmt.Println()
}
