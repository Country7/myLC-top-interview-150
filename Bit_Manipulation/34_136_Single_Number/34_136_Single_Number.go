package main

/* Задача Одно число
Дан непустой массив целых чисел nums, каждый элемент которого встречается дважды, за исключением одного. Найдите этот единственный элемент.
Необходимо реализовать решение с линейной сложностью выполнения и использовать только константное дополнительное пространство.   */

import (
	"fmt"
)

// ─────────────╮
// Функция находит число, которое встречается только один раз во входном массиве nums.
func singleNumber(nums []int) int {
	// Переменная result будет хранить результат. Начнем с 0, так как XOR с 0 возвращает сам элемент.
	result := 0
	// Пройдемся по всем элементам массива
	for _, num := range nums {
		// Операция XOR: Если число встречается дважды, то num ^ num = 0
		// XOR обладает свойством коммутативности и ассоциативности, поэтому порядок не имеет значения.
		result ^= num
	}
	// После прохода по всему массиву, в result останется единственное число, которое встречается один раз.
	return result
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры использования функции
	fmt.Println("{2, 2, 1} = ", singleNumber([]int{2, 2, 1}))             // Вывод: 1
	fmt.Println("{4, 1, 2, 1, 2} = ", singleNumber([]int{4, 1, 2, 1, 2})) // Вывод: 4
	fmt.Println("{1} = ", singleNumber([]int{1}))                         // Вывод: 1
	fmt.Println()
}
