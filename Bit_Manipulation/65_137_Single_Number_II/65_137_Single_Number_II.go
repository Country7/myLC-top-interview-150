package main

/* Задача Одно число II
Дан целочисленный массив nums, каждый элемент которого встречается три раза, за исключением одного, который встречается ровно один раз. Найдите этот элемент и верните его.
Необходимо реализовать решение с линейной сложностью выполнения и использовать только константное дополнительное пространство. */

/*
Мы будем использовать битовые операции, чтобы достичь O(n) по времени и O(1) по памяти.
Идея решения:
Каждое число в массиве встречается трижды, кроме одного.
Мы можем отслеживать количество вхождений каждого бита (0 или 1) для всех чисел.
Но вместо массива счётчиков (что потребовало бы O(32) памяти), используем два битмаски ones и twos, которые будут хранить:
ones — биты, которые встретились один раз (mod 3)
twos — биты, которые встретились два раза (mod 3)
Если бит встретился трижды, он автоматически сбрасывается (так как считаем по модулю 3).
*/

import (
	"fmt"
)

// ─────────────╮
// Функция для поиска уникального числа
func singleNumber(nums []int) int {
	// Переменные для хранения информации о встреченных битах
	// ones  -> хранит биты, которые встретились 1 раз (mod 3)
	// twos  -> хранит биты, которые встретились 2 раза (mod 3)
	ones, twos := 0, 0
	for _, num := range nums {
		// Сначала обновляем twos:
		// Если бит уже есть в ones и встретился ещё раз → переносим его в twos
		twos |= ones & num
		// Теперь обновляем ones:
		// XOR добавляет новый бит, если он ещё не встречался,
		// либо убирает его, если встретился повторно
		ones ^= num
		// mask хранит биты, которые встретились 3 раза
		// (~(ones & twos)) — обнуляет все позиции, где уже накопилось три появления
		commonMask := ^(ones & twos)
		// Применяем маску, чтобы убрать тройные повторы
		ones &= commonMask
		twos &= commonMask
	}
	// В конце в ones будет храниться уникальное число
	return ones
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{2, 2, 3, 2}
	fmt.Println(singleNumber(nums1)) // Ожидается: 3
	// Пример 2
	nums2 := []int{0, 1, 0, 1, 0, 1, 99}
	fmt.Println(singleNumber(nums2)) // Ожидается: 99
	fmt.Println()
}
