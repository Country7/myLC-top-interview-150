package main

/* Задача Сумма двух чисел II — входной массив отсортирован
Дан массив целых чисел с индексом 1, отсортированный по неубывающему значению. Найдите два числа, сумма которых равна заданному целевому числу. Пусть эти два числа — numbers[index1] и numbers[index2], где 1 <= index1 < index2 <= numbers.length.
Верните индексы двух чисел, index1 и index2, сложенные на единицу, в виде массива целых чисел [index1, index2] длины 2.
Проверки генерируются таким образом, чтобы существовало только одно решение. Один и тот же элемент нельзя использовать дважды.
В вашем решении должно использоваться только константное дополнительное пространство. */

import (
	"fmt"
)

// ─────────────╮
// Функция принимает отсортированный массив numbers и целевое число target
// и возвращает индексы двух чисел, сумма которых равна target.
// Индексы должны быть 1-индексированными, как указано в задаче.
func twoSum(numbers []int, target int) []int {
	// Инициализируем два указателя: левый (start) и правый (end)
	start := 0
	end := len(numbers) - 1
	// Будем двигать указатели, пока не найдем решение
	for start < end {
		sum := numbers[start] + numbers[end] // сумма чисел на указателях
		if sum == target {
			// Если сумма равна целевому значению, возвращаем индексы с +1, так как массив 1-индексированный
			return []int{start + 1, end + 1}
		} else if sum < target {
			// Если сумма меньше цели, сдвигаем левый указатель вправо, чтобы увеличить сумму
			start++
		} else {
			// Если сумма больше цели, сдвигаем правый указатель влево, чтобы уменьшить сумму
			end--
		}
	}
	// Согласно условию, всегда есть одно решение, поэтому здесь return не нужен.
	// Но Go требует return, поэтому можно вернуть пустой срез.
	return []int{}
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Примеры тестов
	fmt.Println(twoSum([]int{2, 7, 11, 15}, 9)) // [1, 2]
	fmt.Println(twoSum([]int{2, 3, 4}, 6))      // [1, 3]
	fmt.Println(twoSum([]int{-1, 0}, -1))       // [1, 2]
	fmt.Println()
}
