package main

/* Задача Удаление дубликатов из отсортированного массива
Дан массив целых чисел nums, отсортированный по неубыванию. Удалите дубликаты на месте так, чтобы каждый уникальный элемент встречался только один раз. Относительный порядок элементов должен оставаться неизменным. Затем верните количество уникальных элементов в nums.
Считайте, что количество уникальных элементов в nums равно k. Чтобы получить результат, необходимо выполнить следующие действия:
Измените массив nums так, чтобы первые k элементов nums содержали уникальные элементы в том порядке, в котором они изначально располагались в nums. Остальные элементы nums, как и размер nums, не важны.
Верните k.   */

import (
	"fmt"
)

// ─────────────╮
// Функция принимает отсортированный массив nums (по возрастанию)и "удаляет" дубликаты (в смысле сдвигает
// уникальные элементы в начало массива). Функция возвращает количество уникальных элементов (k).
func removeDuplicates(nums []int) int {
	// Если массив пустой или содержит только один элемент, то количество уникальных элементов равно длине массива
	if len(nums) <= 1 {
		return len(nums)
	}
	// Указатель "k" будет указывать на позицию для записи следующего уникального элемента.
	// Начинаем с 1, так как первый элемент всегда уникален.
	k := 1
	// Проходим по массиву начиная со второго элемента (индекс 1).
	for i := 1; i < len(nums); i++ {
		// Если текущий элемент не равен предыдущему, значит это новый уникальный элемент.
		if nums[i] != nums[i-1] {
			// Записываем этот уникальный элемент в позицию k
			nums[k] = nums[i]
			// Увеличиваем k, так как мы нашли новый уникальный элемент
			k++
		}
	}
	// Возвращаем количество уникальных элементов
	return k
}

// ─────────────╯

// ─────────────╮╰──>
func main() {
	fmt.Println()
	// Пример 1
	nums1 := []int{1, 1, 2}
	k1 := removeDuplicates(nums1)
	fmt.Printf("k = %d, nums = %v\n", k1, nums1[:k1])

	// Пример 2
	nums2 := []int{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}
	k2 := removeDuplicates(nums2)
	fmt.Printf("k = %d, nums = %v\n", k2, nums2[:k2])
	fmt.Println()
}
